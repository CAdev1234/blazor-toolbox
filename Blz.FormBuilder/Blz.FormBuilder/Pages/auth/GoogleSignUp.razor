@layout LoginLayout
@page "/register/google"

@using Blz.FormBuilder.Data
@using Blz.FormBuilder.Services
@using System.Security.Cryptography
@using Microsoft.AspNetCore.Cryptography.KeyDerivation
@using Newtonsoft.Json

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject DAL DAL
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject IJSRuntime JsRuntime


<div style="margin-top: 15vh;">
    <div class="container">
        <div class="d-flex justify-content-center h-100">
            <div class="card">
                <div class="card-header">
                    <h1>Sign Up</h1><span class="google-mark"><i class="fab fa-google"></i></span>
                </div>
                <div class="card-body">
                    <div class="input-group form-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fas fa-user"></i></span>
                        </div>
                        <input type="text" class="form-control" placeholder="Username" @bind-value="@userName">
                    </div>
                    <div class="input-group form-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fas fa-key"></i></span>
                        </div>
                        <input type="password" class="form-control" placeholder="Password" @bind-value="@userPassword">
                    </div>
                    <div class="input-group form-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fas fa-key"></i></span>
                        </div>
                        <input type="password" class="form-control" placeholder="Confirm Password" @bind-value="@confirmPassword">
                    </div>
                    <div class="row align-items-center remember">
                        <input type="checkbox">Remember Me
                    </div>
                    <div class="form-group">
                        <input type="submit" value="Finalize Google Account" class="btn signup_btn" @onclick=@(async()=>await FinalizeGoogleAccount())>
                    </div>

                </div>
                <div class="card-footer">
                    <div id="my-signin2" style="margin-bottom:10px"></div>
                    <div class="d-flex justify-content-center links">
                        Already have an account?<a href="/">Log In</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<style>
    .container {
        height: 100%;
        align-content: center;
    }

    .card {
        padding-top: 20px;
        padding-bottom: 20px;
        margin-top: auto;
        margin-bottom: auto;
        width: 400px;
        background-color: rgba(0,0,0,0.5) !important;
    }

    .card-header {
        padding-bottom: 0px;
        padding-top: 20px;
        display: flex;
    }

        .card-header h1 {
            color: white;
        }
    .google-mark {
        height: 50px;
        position: absolute;
        right: 10px;
        top: 10px;
    }
        .google-mark i{
            justify-content: center;
            align-items: center;
            display: flex;
            font-size: 35px;
            color: black;
            background-color: #FFC312;
            width: 45px;
            height: 45px;
            border-radius: 5px;
            margin-left: 10px;
        }
    .input-group-prepend span {
        width: 40px;
        background-color: #FFC312;
        color: black;
        border: 0 !important;
    }

    input:focus {
        outline: 0 0 0 0 !important;
        box-shadow: 0 0 0 0 !important;
    }

    .remember {
        color: white;
        margin-top: 30px;
    }

        .remember input {
            width: 20px;
            height: 20px;
            margin-left: 15px;
            margin-right: 5px;
        }

    .signup_btn {
        color: black;
        background-color: #FFC312;
        width: 100%;
        font-weight: bold;
        margin-top: 20px;
    }

        .signup_btn:hover {
            color: black;
            background-color: white;
        }

    .links {
        color: white;
    }

        .links a {
            margin-left: 4px;
            color: #FFC312;
        }
    .card-footer {
        margin-top: -20px;
    }
</style>
@code {
    public string userName { get; set; }
    public string userPassword { get; set; }
    public string confirmPassword { get; set; }
    public string emailG { get; set; }

    public User user { get; set; }

    public async Task FinalizeGoogleAccount()
    {
        if (userName == "" || userName == null || userPassword == "" || userPassword == null)
        {
            bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Please fill all inputs.");
            return;
        }
        if (userPassword != confirmPassword )
        {
            bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Password incorrect.");
            return;
        }
        var dotNetReference = DotNetObjectReference.Create(this);
        await JsRuntime.InvokeVoidAsync("renderButton", dotNetReference);
    }

    public byte[] CreateSalt()
    {
        byte[] salt = new byte[128 / 8];
        using (var rng = RandomNumberGenerator.Create())
        {
            rng.GetBytes(salt);
        }
        return salt;
    }

    [JSInvokable("GettingGmailInfo")]
    public async Task GetGmailInfo(string gmail)
    {
        emailG = gmail;
        user = new User();
        user.UserName = userName;
        user.UserEmail = emailG;
        user.IsRegisterationConfirmationEmailSent = true;
        byte[] salt = CreateSalt();
        user.UserSalt = Convert.ToBase64String(salt);
        user.UserSaltPassword = userPassword + user.UserSalt;
        user.RegisterTypeId = 3;
        Console.WriteLine("gmail check");
        Console.WriteLine(emailG);
        User createdUser = new User();
        createdUser = await DAL.CreateUser(user);
        VarData.CURRENT_USER = createdUser;
        await SessionStorage.SetItemAsync("createdUser", createdUser);
        if (VarData.USER_ADDEDTO_TABLE)
        {
            // Send verification email
            MailService mailService = new MailService();
            mailService.SendMailWithSMTP(createdUser.UserEmail, "Verification Email", createdUser.EmailLinkVerificationCode);
            NavigationManager.NavigateTo("/email/verification");
        }
        else
        {
            bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Your email exist.");
        }
    }


}
