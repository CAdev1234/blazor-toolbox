@layout LoginLayout
@page "/register"
@using Blz.FormBuilder.Data
@using Blz.FormBuilder.Services
@using System.Security.Cryptography
@using Microsoft.AspNetCore.Cryptography.KeyDerivation
@using Newtonsoft.Json

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject DAL DAL
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject IJSRuntime JsRuntime


<div style="margin-top: 15vh;">
    <div class="container">
        <div class="d-flex justify-content-center h-100">
            <div class="card">
                <div class="card-header">
                    <h1>Sign Up</h1>
                    <div class="d-flex justify-content-end social_icon">
                        <span>
                            <i class="fab fa-facebook-square" style="font-size:50px"
                               @onclick=@(async () => await RegisterWithFB())></i>
                        </span>
                        <span>
                            <i class="fab fa-google-plus-square" style="font-size:50px"
                               @onclick=@(async () => await RegisterWithGoogle())></i>
                        </span>
                        <span>
                            <i class="fab fa-twitter-square" style="font-size:50px"
                               @onclick=@(async () => await RegisterWithTwitter())></i>
                        </span>
                    </div>
                </div>
                <div class="card-body">
                    <div class="input-group form-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fas fa-user"></i></span>
                        </div>
                        <input type="text" class="form-control" placeholder="Username" @bind-value="@userName">
                    </div>
                    <div class="input-group form-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fas fa-envelope"></i></span>
                        </div>
                        <input type="text" class="form-control" placeholder="Email" @bind-value="@userEmail">

                    </div>
                    <div class="input-group form-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fas fa-key"></i></span>
                        </div>
                        <input type="password" class="form-control" placeholder="Password" @bind-value="@userPassword">
                    </div>
                    <div class="input-group form-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fas fa-key"></i></span>
                        </div>
                        <input type="password" class="form-control" placeholder="Confirm Password" @bind-value="@confirmPassword">
                    </div>
                    <div class="row align-items-center remember">
                        <input type="checkbox">Remember Me
                    </div>
                    <div class="form-group">
                        <input type="submit" value="Sign Up" class="btn signup_btn float-right" @onclick=@(async()=>await RegisterSubmit())>
                    </div>

                </div>
                <div class="card-footer">
                    <div class="d-flex justify-content-center links">
                        Already have an account?<a href="/">Log In</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<style>
    .container {
        height: 100%;
        align-content: center;
    }

    .card {
        padding-top: 20px;
        padding-bottom: 20px;
        margin-top: auto;
        margin-bottom: auto;
        width: 400px;
        background-color: rgba(0,0,0,0.5) !important;
    }

    .social_icon span {
        font-size: 60px;
        margin-left: 10px;
        color: #FFC312;
    }

        .social_icon span:hover {
            color: white;
            cursor: pointer;
        }

    .card-header {
        padding-bottom: 0px;
        padding-top: 20px;
    }

        .card-header h1 {
            color: white;
        }

    .social_icon {
        position: absolute;
        right: 20px;
        top: -45px;
    }

    .input-group-prepend span {
        width: 50px;
        background-color: #FFC312;
        color: black;
        border: 0 !important;
    }

    input:focus {
        outline: 0 0 0 0 !important;
        box-shadow: 0 0 0 0 !important;
    }

    .remember {
        color: white;
    }

        .remember input {
            width: 20px;
            height: 20px;
            margin-left: 15px;
            margin-right: 5px;
        }

    .signup_btn {
        color: black;
        background-color: #FFC312;
        width: 100px;
    }

        .signup_btn:hover {
            color: black;
            background-color: white;
        }

    .links {
        color: white;
    }

        .links a {
            margin-left: 4px;
            color: #FFC312;
        }
</style>
@code {
    User registerUser = new User();
    string userName { get; set; }
    string userEmail { get; set; }
    string userPassword { get; set; }
    string confirmPassword { get; set; }
    string userIpAddress { get; set; }
    byte[] salt { get; set; }

    Microsoft.AspNetCore.Http.HttpContextAccessor contextAccessor = new Microsoft.AspNetCore.Http.HttpContextAccessor();

    async Task RegisterSubmit()
    {
        if (userPassword == confirmPassword)
        {
            registerUser.UserName = userName;
            registerUser.UserEmail = userEmail;
            salt = CreateSalt();
            registerUser.UserSalt = Convert.ToBase64String(salt);
            registerUser.UserSaltPassword = userPassword + registerUser.UserSalt;
            registerUser.EmailLinkVerificationCode = "";
            //registerUser.EmailLinkVerificationCodeValidUntil = DateTime.Now;
            registerUser.IsRegisterationConfirmationEmailSent = false;
            //registerUser.VerifiedAgainstEmailVerificationRecordId = "";
            //registerUser.IsSuccessfulVerification = false;
            //registerUser.LinkUrlAttemped = "";
            //registerUser.IsNewPasswordCreated = false;
            //registerUser.NewPasswordCreatedSalt = "";
            userIpAddress = contextAccessor.HttpContext.Connection?.RemoteIpAddress.ToString();
            registerUser.UserIpAddress = userIpAddress;
            registerUser.UserCreateTime = DateTime.Now;
            //registerUser.TokenValidTime = DateTime.Now;
            //registerUser.LoginTypeId = 1;
            registerUser.RegisterTypeId = 1;
            registerUser.IsUserLoggedOnAtLeastOnce = false;
            //registerUser.IsEmailAddressBeenVerifiedByUser = false;
            //registerUser.IsSuccess = false;
            //registerUser.IsError = false;
            //registerUser.ErrorAnalysis = "";
            //registerUser.ErrorDescription = "";
            //Console.WriteLine(userIpAddress);
            User created_user = new User();
            created_user = await DAL.CreateUser(registerUser);
            VarData.CURRENT_USER = created_user;
            await SessionStorage.SetItemAsync("createdUser", created_user);
            if (VarData.USER_ADDEDTO_TABLE)
            {
                // Send verification email
                MailService mailService = new MailService();
                mailService.SendMailWithSMTP(created_user.UserEmail, created_user.EmailLinkVerificationCode);
                NavigationManager.NavigateTo("/email/verification");
            }
            else
            {
                bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Your email exist.");
            }

        }
        else
        {
            return;
        }


    }
    public byte[] CreateSalt()
    {
        byte[] salt = new byte[128 / 8];
        using (var rng = RandomNumberGenerator.Create())
        {
            rng.GetBytes(salt);
        }
        return salt;
    }
    public string CreateSaltedPassword(byte[] salt)
    {
        string salt_str = Convert.ToBase64String(salt);
        string hashed = Convert.ToBase64String(KeyDerivation.Pbkdf2(
            password: userPassword,
            salt: salt,
            prf: KeyDerivationPrf.HMACSHA1,
            iterationCount: 10000,
            numBytesRequested: 256 / 8)
        );
        return hashed;
    }
    async Task RegisterWithFB()
    {

    }
    async Task RegisterWithGoogle()
    {

    }
    async Task RegisterWithTwitter()
    {

    }
}
