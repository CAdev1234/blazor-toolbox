#pragma checksum "D:\GIT\blazor-toolbox\Blz.FormBuilder\Blz.FormBuilder\Pages\auth\Register.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "5741a6441c038289cdab54a0eda7f155f3c7df96"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Blz.FormBuilder.Pages.auth
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\GIT\blazor-toolbox\Blz.FormBuilder\Blz.FormBuilder\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\GIT\blazor-toolbox\Blz.FormBuilder\Blz.FormBuilder\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\GIT\blazor-toolbox\Blz.FormBuilder\Blz.FormBuilder\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\GIT\blazor-toolbox\Blz.FormBuilder\Blz.FormBuilder\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\GIT\blazor-toolbox\Blz.FormBuilder\Blz.FormBuilder\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\GIT\blazor-toolbox\Blz.FormBuilder\Blz.FormBuilder\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\GIT\blazor-toolbox\Blz.FormBuilder\Blz.FormBuilder\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\GIT\blazor-toolbox\Blz.FormBuilder\Blz.FormBuilder\_Imports.razor"
using Blz.FormBuilder;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\GIT\blazor-toolbox\Blz.FormBuilder\Blz.FormBuilder\_Imports.razor"
using Blz.FormBuilder.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\GIT\blazor-toolbox\Blz.FormBuilder\Blz.FormBuilder\Pages\auth\Register.razor"
using Blz.FormBuilder.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\GIT\blazor-toolbox\Blz.FormBuilder\Blz.FormBuilder\Pages\auth\Register.razor"
using Blz.FormBuilder.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\GIT\blazor-toolbox\Blz.FormBuilder\Blz.FormBuilder\Pages\auth\Register.razor"
using System.Security.Cryptography;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\GIT\blazor-toolbox\Blz.FormBuilder\Blz.FormBuilder\Pages\auth\Register.razor"
using Microsoft.AspNetCore.Cryptography.KeyDerivation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\GIT\blazor-toolbox\Blz.FormBuilder\Blz.FormBuilder\Pages\auth\Register.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.LayoutAttribute(typeof(LoginLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/register")]
    public partial class Register : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 174 "D:\GIT\blazor-toolbox\Blz.FormBuilder\Blz.FormBuilder\Pages\auth\Register.razor"
       
    User registerUser = new User();
    string userName { get; set; }
    string userEmail { get; set; }
    string userPassword { get; set; }
    string confirmPassword { get; set; }
    string userIpAddress { get; set; }
    byte[] salt { get; set; }

    Microsoft.AspNetCore.Http.HttpContextAccessor contextAccessor = new Microsoft.AspNetCore.Http.HttpContextAccessor();

    async Task RegisterSubmit()
    {
        if (userPassword == confirmPassword)
        {
            registerUser.UserName = userName;
            registerUser.UserEmail = userEmail;
            salt = CreateSalt();
            registerUser.UserSalt = Convert.ToBase64String(salt);
            registerUser.UserSaltPassword = userPassword + registerUser.UserSalt;
            registerUser.EmailLinkVerificationCode = "";
            //registerUser.EmailLinkVerificationCodeValidUntil = DateTime.Now;
            registerUser.IsRegisterationConfirmationEmailSent = false;
            //registerUser.VerifiedAgainstEmailVerificationRecordId = "";
            //registerUser.IsSuccessfulVerification = false;
            //registerUser.LinkUrlAttemped = "";
            //registerUser.IsNewPasswordCreated = false;
            //registerUser.NewPasswordCreatedSalt = "";
            userIpAddress = contextAccessor.HttpContext.Connection?.RemoteIpAddress.ToString();
            registerUser.UserIpAddress = userIpAddress;
            registerUser.UserCreateTime = DateTime.Now;
            //registerUser.TokenValidTime = DateTime.Now;
            //registerUser.LoginTypeId = 1;
            registerUser.RegisterTypeId = 1;
            registerUser.IsUserLoggedOnAtLeastOnce = false;
            //registerUser.IsEmailAddressBeenVerifiedByUser = false;
            //registerUser.IsSuccess = false;
            //registerUser.IsError = false;
            //registerUser.ErrorAnalysis = "";
            //registerUser.ErrorDescription = "";
            //Console.WriteLine(userIpAddress);
            User created_user = new User();
            created_user = await DAL.CreateUser(registerUser);
            VarData.CURRENT_USER = created_user;
            await SessionStorage.SetItemAsync("createdUser", created_user);
            if (VarData.USER_ADDEDTO_TABLE)
            {
                // Send verification email
                MailService mailService = new MailService();
                mailService.SendMailWithSMTP(created_user.UserEmail, created_user.EmailLinkVerificationCode);
                NavigationManager.NavigateTo("/email/verification");
            }
            else
            {
                bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Your email exist.");
            }

        }
        else
        {
            return;
        }


    }
    public byte[] CreateSalt()
    {
        byte[] salt = new byte[128 / 8];
        using (var rng = RandomNumberGenerator.Create())
        {
            rng.GetBytes(salt);
        }
        return salt;
    }
    public string CreateSaltedPassword(byte[] salt)
    {
        string salt_str = Convert.ToBase64String(salt);
        string hashed = Convert.ToBase64String(KeyDerivation.Pbkdf2(
            password: userPassword,
            salt: salt,
            prf: KeyDerivationPrf.HMACSHA1,
            iterationCount: 10000,
            numBytesRequested: 256 / 8)
        );
        return hashed;
    }
    async Task RegisterWithFB()
    {

    }
    async Task RegisterWithGoogle()
    {

    }
    async Task RegisterWithTwitter()
    {

    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Blazored.SessionStorage.ISessionStorageService SessionStorage { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DAL DAL { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
    }
}
#pragma warning restore 1591
