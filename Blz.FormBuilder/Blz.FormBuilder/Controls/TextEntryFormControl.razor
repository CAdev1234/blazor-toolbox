@inherits BaseEditorControl
@inject IJSRuntime JSRuntime


<div class="row control-div" style="cursor:move;" draggable="true" @ondragstart="OnDragStart">
    <label style="cursor:move;" @onclick="@(()=>EntryControlClick(EntryText, EntryBg))">@EntryText</label>
    <input 
        class="TextEntryControl @HighlightCss"
        style="background-color:@EntryBg; color: white;"  
        type="text" 
        value="@EntryText" 
        @onclick="@(e=>ClickTextEntryText(EntryText, EntryBg))"
        @onchange="@(e=>changeEntryText(e))"
        @oninput="OnEntryTextChanged"
    />
</div>
@code {
    [Parameter]
    public string EntryText { get; set; }
    [Parameter]
    public string EntryBg { get; set; }
    [Parameter]
    public EventCallback<string> EntryTextChanged { get; set; }

    public TextEntryFormControl() { }

    public TextEntryFormControl(string textEntry, string bg)
    {
        this.EntryText = textEntry;
        if (bg == "default")
        {
            this.EntryBg = "#5f9ea0";
        }else
        {
            this.EntryBg = bg;
        }
    }

    private async void ClickTextEntryText(string name, string bgcolor)
    {
        await JSRuntime.InvokeVoidAsync("FormDesignerJs.setControlProperty", this.Index);
    }
    private void OnEntryTextChanged(ChangeEventArgs e)
    {
        this.EntryText = e.Value.ToString();
    }

    public async void EntryControlClick(string name, string bgcolor) {

        await JSRuntime.InvokeVoidAsync("FormDesignerJs.removeHighlightCss", this.Index);
        await JSRuntime.InvokeVoidAsync("FormDesignerJs.setControlProperty", this.Index);

    }
    public async void changeEntryText(ChangeEventArgs args)
    {
        this.EntryText = args.Value.ToString();
        TextEntryFormControl current_entryForm = CurrentForm.AllControls[this.Index] as TextEntryFormControl;
        current_entryForm.EntryText = this.EntryText;
        await JSRuntime.InvokeVoidAsync("FormDesignerJs.removeHighlightCss", this.Index);
        await JSRuntime.InvokeVoidAsync("FormDesignerJs.setControlProperty", this.Index);
    }
}
